// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

// –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
const requestCache = new Map();
const CACHE_DURATION = 300 * 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 5 –º–∏–Ω—É—Ç

// –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
function getAuthToken() {
  if (typeof window === 'undefined') return '';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ sessionStorage
  let token = sessionStorage.getItem('supabase.auth.token');
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ cookie
  if (!token) {
    const tokenCookie = document.cookie
      .split('; ')
      .find(row => row.startsWith('supabase.auth.token'));
    
    if (tokenCookie) {
      token = tokenCookie.split('=')[1];
    }
  }
  
  if (token) {
    try {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º access_token
      const parsedToken = JSON.parse(token);
      return parsedToken?.currentSession?.access_token || '';
    } catch (e) {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return token;
    }
  }
  
  return '';
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–æ–≥—Ä–µ–≤ API
function shouldSkipWarmup() {
  if (typeof window === 'undefined') return true;
  
  return localStorage.getItem('disable_api_warmup') === 'true' ||
         sessionStorage.getItem('skip_session_check') === 'true';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function fetchWithAuth(url: string, options: RequestInit = {}) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞" API
  if (shouldSkipWarmup() && url.includes('/profile')) {
    console.log('üîç Skipping API warmup request to:', url);
    return Promise.resolve({ skipped: true });
  }

  // –ï—Å–ª–∏ —ç—Ç–æ GET –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
  const cacheKey = `${options.method || 'GET'}_${url}_${JSON.stringify(options.body || {})}`;
  if ((options.method === undefined || options.method === 'GET') && requestCache.has(cacheKey)) {
    const cacheEntry = requestCache.get(cacheKey);
    if (Date.now() - cacheEntry.timestamp < CACHE_DURATION) {
      return cacheEntry.data;
    }
    // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    requestCache.delete(cacheKey);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  const token = getAuthToken();

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const headers = {
    'Content-Type': 'application/json',
    ...(token ? { Authorization: `Bearer ${token}` } : {}),
    ...options.headers,
  };
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const priority = url.includes('profile') ? 'low' : 'auto';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
  async function attemptFetch(retries = 2): Promise<any> {  // –£–º–µ–Ω—å—à–∞–µ–º —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ 2
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥
      
      const response = await fetch(`${API_URL}${url}`, {
        ...options,
        headers,
        signal: controller.signal,
        // @ts-ignore - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è fetch API –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–æ–≤—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
        priority: priority
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        // –ù–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º JSON –¥–ª—è –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        throw new Error(`API Error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã –≤ –∫—ç—à
      if (options.method === undefined || options.method === 'GET') {
        requestCache.set(cacheKey, { data, timestamp: Date.now() });
      }
      
      return data;
    } catch (error: any) {
      if (error.name === 'AbortError') {
        console.warn('Request timeout:', url);
      }
      
      // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
      if (retries > 0 && !shouldSkipWarmup()) {  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞
        return attemptFetch(retries - 1);
      }
      
      // –î–ª—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      if (url.includes('/profile') || url.includes('/users/')) {
        console.warn(`Returning empty response for non-critical request: ${url}`);
        return {};
      }
      
      throw error;
    }
  }

  return attemptFetch();
}

// API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authApi = {
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(email: string, password: string) {
    return fetchWithAuth('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async register(email: string, password: string, username: string) {
    return fetchWithAuth('/auth/register', {
      method: 'POST',
      body: JSON.stringify({ email, password, username }),
    });
  },

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(email: string) {
    return fetchWithAuth('/auth/reset-password', {
      method: 'POST',
      body: JSON.stringify({ email }),
    });
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  async updatePassword(password: string) {
    return fetchWithAuth('/auth/update-password', {
      method: 'POST',
      body: JSON.stringify({ password }),
    });
  },

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout() {
    return fetchWithAuth('/auth/logout', {
      method: 'POST',
    });
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const usersApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(userId: string) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (shouldSkipWarmup()) {
      return Promise.resolve({ id: userId, skipped: true });
    }
    
    return fetchWithAuth(`/users/${userId}/profile`);
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateProfile(userId: string, userData: any) {
    return fetchWithAuth(`/users/${userId}/profile`, {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  },
}; 